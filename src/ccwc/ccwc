#! /usr/bin/env python3

import argparse
import locale
import os


def do_count_bytes(filename):
    return os.path.getsize(filename)


def do_count_lines(lines):
    return len(lines)


def do_count_words(lines):
    words = [len(line.split()) for line in lines]
    return sum(words)


def do_count_chars(file):
    file.seek(0)
    return len(file.read())


def do_count(filename, action='all'):
    res = {}
    
    with open(filename, newline='') as f:
        lines = f.readlines()

        if action == 'bytes':
            res['bytes'] = do_count_bytes(filename)

        if action == 'lines':
            res['lines'] = do_count_lines(lines)

        if action == 'words':
            res['words'] = do_count_words(lines)

        if action == 'chars':
            res['chars'] = do_count_chars(f)

        if action == 'all':
            res['bytes'] = do_count_bytes(filename)
            res['lines'] = do_count_lines(lines)
            res['words'] = do_count_words(lines)

    return res


def output(input):
    out = []
    for o in ['chars', 'lines', 'words', 'bytes']:
        if o in input:
            out.append( str(input[o]) )

    out.append(input['file'])
    return '\t'.join(out)


# Collect arguments
ap = argparse.ArgumentParser(
    prog='ccwc',
    description='DIY wc')
ap.add_argument('filename')
ap.add_argument('-c', '--bytes', action='store_true')
ap.add_argument('-l', '--lines', action='store_true')
ap.add_argument('-w', '--words', action='store_true')
ap.add_argument('-m', '--chars', action='store_true')


args = ap.parse_args()

# Figure out what to count
out = {'file': args.filename}


if args.bytes:
    out['bytes'] = do_count(args.filename, action='bytes')['bytes']
elif args.lines:
    out['lines'] = do_count(args.filename, action='lines')['lines']
elif args.words:
    out['words'] = do_count(args.filename, action='words')['words']
elif args.chars:
    out['chars'] = do_count(args.filename, action='chars')['chars']
else:
    out.update(do_count(args.filename))

# Format and print the output
print(output(out))